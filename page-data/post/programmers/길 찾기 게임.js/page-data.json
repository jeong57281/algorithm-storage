{"componentChunkName":"component---src-templates-post-tsx","path":"/post/programmers/길 찾기 게임.js","result":{"data":{"file":{"ext":".js","name":"길 찾기 게임","fields":{"content":"function solution(nodeinfo) {\n  const yToX = new Map();\n\n  nodeinfo.forEach(([x, y], i) => {\n    if (!yToX.has(y)) {\n      yToX.set(y, []);\n    }\n\n    yToX.get(y).push({ x, i: i + 1 });\n  });\n\n  yToX.forEach((value) => {\n    value.sort((a, b) => a.x - b.x);\n  });\n\n  const sortedNodeInfo = [...yToX]\n    .sort((a, b) => b[0] - a[0])\n    .map(([y, xs]) => xs);\n\n  const pre = [];\n  const post = [];\n\n  const traversal = (l, r, y, x) => {\n    const parent = sortedNodeInfo[y][x];\n\n    const childrens = sortedNodeInfo[y + 1];\n\n    pre.push(parent.i);\n\n    if (childrens) {\n      childrens.forEach(({ x, i }, index) => {\n        if (l < x && x < parent.x) {\n          traversal(l, parent.x, y + 1, index);\n        }\n\n        if (parent.x < x && x < r) {\n          traversal(parent.x, r, y + 1, index);\n        }\n      });\n    }\n\n    post.push(parent.i);\n  };\n\n  traversal(-1, 1e5 + 1, 0, 0);\n\n  return [pre, post];\n}\n","stampObject":{"modified":1683502066,"created":1683502066}}},"markdownRemark":{"html":"<h2>풀이 방법</h2>\n<h3>1) y값을 기준으로 x값을 묶고, x값을 오름차순으로 정렬한다.</h3>\n<p>같은 레벨의 노드들을 묶어주는 작업이다.</p>\n<p>x값을 오름차순으로 정렬하여야 순회할 때 서브트리의 순서가 L → R 로 지켜지게 된다.</p>\n<p>이 과정에서 정답에 사용될 노드의 번호도 함께 저장한다. <code>yToX</code></p>\n<h3>2) y값을 기준으로 내림차순 정렬한다.</h3>\n<p>y값의 크기로 부모-자식 관계가 형성되므로, y값이 큰 순서대로 정렬하여 부모 노드부터 탐색할 수 있도록 한다.</p>\n<p>y값은 부모-자식 관계를 알기 위한 정렬의 요소로 사용된 이후에는 쓸일이 없으므로 버려도 된다. <code>sortedNodeInfo</code></p>\n<h3>3) x값 구간을 이용하여 트리를 순회한다.</h3>\n<p>x값은 모든 노드가 고유한 값을 가지며, 왼쪽 서브트리는 부모노드의 x값 보다 작고 오른쪽 서브트리는 부모노드의 x값 보다 크다고 했다.</p>\n<p>이를 이용해서 내 왼쪽, 오른쪽 서브트리가 어느 x값 구간에 있는지를 알 수 있다.</p>\n<blockquote>\n<p>이 때, 좌표값은 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span></span>이상 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>100</mn><mo separator=\"true\">,</mo><mn>000</mn></mrow><annotation encoding=\"application/x-tex\">100,000</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.1944em;\"></span><span class=\"mord\">100</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">000</span></span></span></span></span>이하 이므로 모든 좌표에 대해서 조사하면 시간초과가 난다.</p>\n<p>반대로 존재하는 노드에 대해 범위를 조사할 경우, 노드는 최대 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>10</mn><mo separator=\"true\">,</mo><mn>000</mn></mrow><annotation encoding=\"application/x-tex\">10,000</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.1944em;\"></span><span class=\"mord\">10</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">000</span></span></span></span></span>개 밖에 되지 않으므로 시간안에 조사를 할 수 있다.</p>\n</blockquote>\n<p>최종적으로, 재귀 호출의 이전에 현재 노드의 번호를 출력하면 전위 순회, 이후에 출력하면 후위 순회가 된다.</p>","frontmatter":{"title":"Lv.3 길 찾기 게임"}}},"pageContext":{"slug":"programmers/길 찾기 게임.js","slugNoExt":"programmers/길 찾기 게임","repoName":"algorithm-storage","userName":"junghyunbak","profileUrl":"https://avatars.githubusercontent.com/u/44913775?v=4","utterances":"junghyunbak/junghyunbak.github.io","googleSiteVerification":"LwKjAts-rLkskyg9wgFh0L-OC3Y2Eo2T4SBrqPjxu8c"}},"staticQueryHashes":[],"slicesMap":{}}